// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sqstransport

import (
	"context"
	"sync"
)

// Ensure, that TransportErrorHandlerSpy does implement transportErrorHandler.
// If this is not the case, regenerate this file with moq.
var _ transportErrorHandler = &TransportErrorHandlerSpy{}

// TransportErrorHandlerSpy is a mock implementation of transportErrorHandler.
//
// 	func TestSomethingThatUsestransportErrorHandler(t *testing.T) {
//
// 		// make and configure a mocked transportErrorHandler
// 		mockedtransportErrorHandler := &TransportErrorHandlerSpy{
// 			HandleFunc: func(ctx context.Context, err error)  {
// 				panic("mock out the Handle method")
// 			},
// 		}
//
// 		// use mockedtransportErrorHandler in code that requires transportErrorHandler
// 		// and then make assertions.
//
// 	}
type TransportErrorHandlerSpy struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, err error)

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Err is the err argument value.
			Err error
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *TransportErrorHandlerSpy) Handle(ctx context.Context, err error) {
	if mock.HandleFunc == nil {
		panic("TransportErrorHandlerSpy.HandleFunc: method is nil but transportErrorHandler.Handle was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Err error
	}{
		Ctx: ctx,
		Err: err,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	mock.HandleFunc(ctx, err)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//     len(mockedtransportErrorHandler.HandleCalls())
func (mock *TransportErrorHandlerSpy) HandleCalls() []struct {
	Ctx context.Context
	Err error
} {
	var calls []struct {
		Ctx context.Context
		Err error
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}
