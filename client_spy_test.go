// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sqstransport

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"sync"
)

// Ensure, that ClientSpy does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientSpy{}

// ClientSpy is a mock implementation of Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked Client
// 		mockedClient := &ClientSpy{
// 			ReceiveMessageFunc: func(ctx context.Context, params *sqs.ReceiveMessageInput, optFns ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error) {
// 				panic("mock out the ReceiveMessage method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires Client
// 		// and then make assertions.
//
// 	}
type ClientSpy struct {
	// ReceiveMessageFunc mocks the ReceiveMessage method.
	ReceiveMessageFunc func(ctx context.Context, params *sqs.ReceiveMessageInput, optFns ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReceiveMessage holds details about calls to the ReceiveMessage method.
		ReceiveMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *sqs.ReceiveMessageInput
			// OptFns is the optFns argument value.
			OptFns []func(*sqs.Options)
		}
	}
	lockReceiveMessage sync.RWMutex
}

// ReceiveMessage calls ReceiveMessageFunc.
func (mock *ClientSpy) ReceiveMessage(ctx context.Context, params *sqs.ReceiveMessageInput, optFns ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error) {
	if mock.ReceiveMessageFunc == nil {
		panic("ClientSpy.ReceiveMessageFunc: method is nil but Client.ReceiveMessage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *sqs.ReceiveMessageInput
		OptFns []func(*sqs.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReceiveMessage.Lock()
	mock.calls.ReceiveMessage = append(mock.calls.ReceiveMessage, callInfo)
	mock.lockReceiveMessage.Unlock()
	return mock.ReceiveMessageFunc(ctx, params, optFns...)
}

// ReceiveMessageCalls gets all the calls that were made to ReceiveMessage.
// Check the length with:
//     len(mockedClient.ReceiveMessageCalls())
func (mock *ClientSpy) ReceiveMessageCalls() []struct {
	Ctx    context.Context
	Params *sqs.ReceiveMessageInput
	OptFns []func(*sqs.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *sqs.ReceiveMessageInput
		OptFns []func(*sqs.Options)
	}
	mock.lockReceiveMessage.RLock()
	calls = mock.calls.ReceiveMessage
	mock.lockReceiveMessage.RUnlock()
	return calls
}
